{"version":3,"sources":["../src/ngmeta.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAmB,MAAO,eAAA,CAAgB;AACnD,OAAO,EAAE,OAAA,IAAW,MAAA,EAAO,MAAO,2BAAA,CAA4B;AAE9D,OAAO,EAAE,MAAA,EAAQ,aAAA,EAAc,MAAO,iBAAA,CAAkB;AAIxD;;;;EAIE;AAEF;IAIE;;;MAGE;IACF,gBAAoB,OAAe;QAAnC,iBAKC;QALmB,YAAO,GAAP,OAAO,CAAQ;QAN3B,SAAI,GAAe,MAAM,EAAE,CAAC;QAC5B,mBAAc,GAAY,IAAI,CAAC;QAMrC,IAAI,CAAC,SAAS,GAAG,QAAoB,CAAC;QACtC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,UAAC,GAAQ;YACrC,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;IACL,CAAC;IAQD,sBAAI,6BAAS;QANb;;;;;UAKE;aACF,UAAc,YAAoB;YAChC,IAAI,CAAC;gBACH,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,CAAC;gBACvC,IAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;gBACvE,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;gBACtD,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;YAC1D,CAAC;YAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACjB,CAAC;;;OAAA;IAQD,sBAAI,yBAAK;QANT;;;;;UAKE;aACF;YACE,IAAI,CAAC;gBACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC5C,CAAC;YAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAAC,MAAM,CAAC,EAAE,CAAC;YAAC,CAAC;QAC5B,CAAC;QAED;;;;;UAKE;aACF,UAAU,KAAa;YACrB,IAAI,CAAC;gBACH,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YAC5C,CAAC;YAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACjB,CAAC;;;OAZA;IAoBD,sBAAI,iCAAa;QANjB;;;;;UAKE;aACF;YACE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;QAC7B,CAAC;QAED;;;;;UAKE;aACF,UAAkB,MAAe;YAC/B,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC;QAC/B,CAAC;;;OAVA;IAYD;;;;;MAKE;IACK,2BAAU,GAAjB,UAAkB,QAAkB;QAClC,IAAI,CAAC;YACH,EAAE,CAAC,CAAC,OAAO,QAAQ,CAAC,SAAS,KAAK,QAAQ,IAAI,OAAO,QAAQ,CAAC,IAAI,KAAK,QAAQ,IAAI,OAAO,QAAQ,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACxH,IAAI,CAAC,UAAU,CAAC,MAAI,QAAQ,CAAC,SAAS,UAAK,QAAQ,CAAC,IAAI,OAAI,CAAC,CAAC;gBAC9D,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;gBAClE,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAChE,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,SAAS,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;YAC5D,CAAC;QACH,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjB,CAAC;IAED;;;;;;MAME;IACK,wBAAO,GAAd,UAAe,OAAgB;QAC7B,IAAI,CAAC;YACH,eAAe;YACf,EAAE,CAAC,CAAC,OAAO,OAAO,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACtC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;YAC7B,CAAC;YACD,qCAAqC;YACrC,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,YAAY,KAAK,CAAC,CAAC,CAAC;gBAClC,GAAG,CAAC,CAAe,UAAY,EAAZ,KAAA,OAAO,CAAC,IAAI,EAAZ,cAAY,EAAZ,IAAY;oBAA1B,IAAI,MAAM,SAAA;oBACb,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC;oBAC1B,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;iBACzB;YACH,CAAC;YACD,yCAAyC;YACzC,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,YAAY,KAAK,CAAC,CAAC,CAAC;gBACtC,GAAG,CAAC,CAAe,UAAgB,EAAhB,KAAA,OAAO,CAAC,QAAQ,EAAhB,cAAgB,EAAhB,IAAgB;oBAA9B,IAAI,MAAM,SAAA;oBACb,MAAM,CAAC,SAAS,GAAG,UAAU,CAAC;oBAC9B,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;iBACzB;YACH,CAAC;YACD,oCAAoC;YACpC,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,YAAY,KAAK,CAAC,CAAC,CAAC;gBAClC,GAAG,CAAC,CAAe,UAAY,EAAZ,KAAA,OAAO,CAAC,IAAI,EAAZ,cAAY,EAAZ,IAAY;oBAA1B,IAAI,MAAM,SAAA;oBACb,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;iBACzB;YACH,CAAC;YACD,qBAAqB;YACrB,EAAE,CAAC,CAAC,OAAO,OAAO,CAAC,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC1C,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;YACrC,CAAC;QACH,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,CAAC;QACV,CAAC;IACH,CAAC;IAED;;;;;MAKE;IACM,2BAAU,GAAlB,UAAmB,WAAmB;QACpC,IAAI,CAAC;YACH,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;YACpE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAClD,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjB,CAAC;IAED;;;;;MAKE;IACM,6BAAY,GAApB,UAAqB,GAAQ;QAC3B,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,YAAY,aAAa,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACpF,MAAM,CAAC;QACT,CAAC;QACD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;IACpC,CAAC;IAQH,aAAC;AAAD,CArKA,AAqKC;;AAPM,iBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,qBAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,MAAM,GAAG;CACf,EAF6F,CAE7F,CAAC","file":"ngmeta.service.js","sourceRoot":"","sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport { ÉµgetDOM as getDOM } from '@angular/platform-browser';\nimport { DomAdapter } from '@angular/platform-browser/src/dom/dom_adapter';\nimport { Router, NavigationEnd } from '@angular/router';\n\nimport { TagData, MetaData } from './tag-data.interface';\n\n/**\n* Service that allows setting and updating of meta tags, title tags, and canonical tags.\n* @class NGMeta\n* @constructor\n*/\n\nexport class NGMeta {\n  private _document: any;\n  private _dom: DomAdapter = getDOM();\n  private _scrollEnabled: boolean = true;\n  /**\n  * Initializes service. Creates faux DOM component to abstractly interact with DOM. Subscribes to route events.\n  * @method constructor\n  */\n  constructor(private _router: Router) {\n    this._document = document as Document;\n    this._router.events.subscribe((evt: any) => {\n      this._scrollToTop(evt);\n    });\n  }\n\n  /**\n  * Sets canonical tag for page, to call `this._ngmeta.canonical = 'https://www.google.com';`.\n  * @public\n  * @method canonical\n  * @param {string} canonicalURL Canonical URL for the page.\n  */\n  set canonical(canonicalURL: string) {\n    try {\n      this._removeTag('[rel=\\'canonical\\']');\n      const canonical = this._dom.createElement(this._document.head, 'link');\n      this._dom.setAttribute(canonical, 'rel', 'canonical');\n      this._dom.setAttribute(canonical, 'href', canonicalURL);\n    } catch (e) { }\n  }\n\n  /**\n  * Returns string value of current page's title, to call `let title: string = this._ngmeta.title;`.\n  * @public\n  * @method title\n  * @return {string} Current page's title.\n  */\n  get title(): string {\n    try {\n      return this._dom.getTitle(this._document);\n    } catch (e) { return ''; }\n  }\n\n  /**\n  * Sets `<title></title>` tag for page, to call `this._ngmeta.title = 'Google';`.\n  * @public\n  * @method title\n  * @param {string} title Title value for the page.\n  */\n  set title(title: string) {\n    try {\n      this._dom.setTitle(this._document, title);\n    } catch (e) { }\n  }\n\n  /**\n  * Returns boolean value if scroll to top is enabled, to call `let scrollEnabled: boolean = this._ngmeta.scrollEnabled;`.\n  * @public\n  * @method scrollEnabled\n  * @return {boolean} If scroll to top is enabled.\n  */\n  get scrollEnabled(): boolean {\n    return this._scrollEnabled;\n  }\n\n  /**\n  * Sets wether `<body></body>` should scroll to top on route change, to call `this._ngmeta.scrollEnabled = true;`.\n  * @public\n  * @method scrollEnabled\n  * @param {Boolean} scroll If `<body></body>` should scroll.\n  */\n  set scrollEnabled(scroll: boolean) {\n    this._scrollEnabled = scroll;\n  }\n\n  /**\n  * Creates HTML for a `<meta>` tag of any attribute.\n  * @public\n  * @method createMeta\n  * @param {MetaData} metaData The attribute (like 'name' or 'property') type (like 'description' or 'og:title') and content of the tag.\n  */\n  public createMeta(metaData: MetaData): void {\n    try {\n      if (typeof metaData.attribute === 'string' && typeof metaData.type === 'string' && typeof metaData.content === 'string') {\n        this._removeTag(`[${metaData.attribute}='${metaData.type}']`);\n        const meta = this._dom.createElement(this._document.head, 'meta');\n        this._dom.setAttribute(meta, metaData.attribute, metaData.type);\n        this._dom.setAttribute(meta, 'content', metaData.content);\n      }\n    } catch (e) { }\n  }\n\n  /**\n  * Set function setting all `<head></head>` metadata.\n  * @public\n  * @method setHead\n  * @param {TagData} tagData An object of the new values for the tags an user wants.\n  * @throws {Error} An error.\n  */\n  public setHead(tagData: TagData): void {\n    try {\n      // Edit <title>\n      if (typeof tagData.title === 'string') {\n        this.title = tagData.title;\n      }\n      // Edit meta tags with Name attribute\n      if (tagData.name instanceof Array) {\n        for (let detail of tagData.name) {\n          detail.attribute = 'name';\n          this.createMeta(detail);\n        }\n      }\n      // Edit meta tags with Property attribute\n      if (tagData.property instanceof Array) {\n        for (let detail of tagData.property) {\n          detail.attribute = 'property';\n          this.createMeta(detail);\n        }\n      }\n      // Edit meta tags with any attribute\n      if (tagData.meta instanceof Array) {\n        for (let detail of tagData.meta) {\n          this.createMeta(detail);\n        }\n      }\n      // Edit canonical tag\n      if (typeof tagData.canonical === 'string') {\n        this.canonical = tagData.canonical;\n      }\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  /**\n  * Removes HTML from `<head></head>` for a tag.\n  * @private\n  * @method _removeTag\n  * @param {String} tagSelector Selector detail for tag to remove.\n  */\n  private _removeTag(tagSelector: string): void {\n    try {\n      let tag = this._dom.querySelector(this._document.head, tagSelector);\n      this._dom.removeChild(tag, this._document.head);\n    } catch (e) { }\n  }\n\n  /**\n  * Scrolls web page to top of `<body></body>`.\n  * @private\n  * @method _scrollToTop\n  * @param {Number} duration Duration in time for scroll to top of page.\n  */\n  private _scrollToTop(evt: any): void {\n    if (!(evt instanceof NavigationEnd) || evt.url.includes('#') || !this.scrollEnabled) {\n      return;\n    }\n    this._document.body.scrollTop = 0;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Router, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}